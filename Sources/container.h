#ifndef CONTAINER_H
#define CONTAINER_H

#include "main.h"

#include "item.h"


//==================================================================================================
//         TYPE:    Class
//  DESCRIPTION:    Base class for different containers (inventory, bag, chests, barrels, etc.)
//   PARAMETERS:    ........
// RETURN VALUE:    ........
//     COMMENTS:    А нужен ли мне отдельный класс для контейнеров? Или же достаточно динамического
//                  массива для этих целей? Вопрос в том, кто ответственен за перемещение предметов
//                  между контейнерами? Владельцы этих контейнеров через свой интерфейс или через
//                  интерфейс, предоставляемый контейнером? Наверное, всё-таки владельцы...
//==================================================================================================
class Container {

// #################################################################################################
// ######################################  VARIABLES  ##############################################
// #################################################################################################

// ######################################  PUBLIC     ##############################################
public:
    enum class Type {
        UNIVERSAL,
        POTIONS,
        SCROLLS,

        TOTAL
    };


// ######################################  PROTECTED   #############################################
protected:


// ######################################  PRIVATE    ##############################################
private:
    Type    mb_type {Type::UNIVERSAL};
    int     mb_limit {100};

    VectorClass<UniquePtrClass<Item>> mb_container;





// #################################################################################################
// ######################################  INTERFACE  ##############################################
// #################################################################################################

// ######################################  PUBLIC     ##############################################
public:
    Container(Container::Type type = Type::UNIVERSAL, int limit = 100);



    void sort(Item::Type type);
    void display() const;
    void removeItem(int itemId, int count);
    int putItem(const UniquePtrClass<Item>& itemPtr);
    void extractItem(int itemId);



// ######################################  PROTECTED   #############################################
protected:


// ######################################  PRIVATE    ##############################################
private:
};

#endif // CONTAINER_H
