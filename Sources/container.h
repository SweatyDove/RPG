#ifndef CONTAINER_H
#define CONTAINER_H

#include "main.h"

#include "item.h"


//==================================================================================================
//         TYPE:    Class
//  DESCRIPTION:    Base class for different containers (inventory, bag, chests, barrels, etc.)
//   PARAMETERS:    ........
// RETURN VALUE:    ........
//     COMMENTS:    ........
//==================================================================================================
class Container {

// #################################################################################################
// ######################################  VARIABLES  ##############################################
// #################################################################################################

// ######################################  PUBLIC     ##############################################
public:


// ######################################  PROTECTED   #############################################
protected:


// ######################################  PRIVATE    ##############################################
private:
    VectorClass<UniquePtrClass<Item>> mb_container;





// #################################################################################################
// ######################################  INTERFACE  ##############################################
// #################################################################################################

// ######################################  PUBLIC     ##############################################
public:
    Container();



    void sort(Item::Type type);
    void display();
    void removeItem(int itemId, int count);
    void addItem(const UniquePtrClass<Item>& itemPtr);



// ######################################  PROTECTED   #############################################
protected:


// ######################################  PRIVATE    ##############################################
private:
};

#endif // CONTAINER_H
